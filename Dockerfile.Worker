# Use the official .NET SDK image to build the application
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build

# Set the working directory
WORKDIR /src

# Copy the solution file and restore dependencies
COPY NetCoreRabbitMQ.sln ./

# Copy all projects to the working directory
COPY NetCoreRabbitMQ.Api/ ./NetCoreRabbitMQ.Api/
COPY NetCoreRabbitMQ.Application/ ./NetCoreRabbitMQ.Application/
COPY NetCoreRabbitMQ.Data/ ./NetCoreRabbitMQ.Data/
COPY NetCoreRabbitMQ.Domain/ ./NetCoreRabbitMQ.Domain/
COPY NetCoreRabbitMQ.Infrastructure/ ./NetCoreRabbitMQ.Infrastructure/
COPY NetCoreRabbitMQ.OrdersWorker/ ./NetCoreRabbitMQ.OrdersWorker/

# Restore dependencies for the OrdersWorker project
RUN dotnet restore ./NetCoreRabbitMQ.OrdersWorker/NetCoreRabbitMQ.OrdersWorker.csproj

# Build the project
RUN dotnet build ./NetCoreRabbitMQ.OrdersWorker/NetCoreRabbitMQ.OrdersWorker.csproj -c Release -o /app/build

# Publish the application
RUN dotnet publish ./NetCoreRabbitMQ.OrdersWorker/NetCoreRabbitMQ.OrdersWorker.csproj -c Release -o /app/publish --no-restore

# Use the official runtime image for running the application
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime

# Set the working directory
WORKDIR /app

# Copy the published output from the build stage
COPY --from=build /app/publish .

# Set the entry point for the container
ENTRYPOINT ["dotnet", "NetCoreRabbitMQ.OrdersWorker.dll"]
